/*!
 *
 * ======================================================================
 * 00. BREAKPOINTS
 * ======================================================================
 * 
 */


// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
  }
  
  // Minimum breakpoint width. Null for the smallest (first) breakpoint.
  //
  //    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    576px
  @function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
  }
  
  // Maximum breakpoint width. Null for the largest (last) breakpoint.
  // The maximum value is calculated as the minimum of the next one less 0.02px
  // to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
  // See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
  // Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
  // See https://bugs.webkit.org/show_bug.cgi?id=178261
  //
  //    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    767.98px
  @function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $next: breakpoint-next($name, $breakpoints);
    @return if($next, breakpoint-min($next, $breakpoints) - .02, null);
  }
  
  // Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
  // Useful for making responsive utilities.
  //
  //    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    ""  (Returns a blank string)
  //    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    "-sm"
  @function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
  }
  
  // Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
  // Makes the @content apply to the given breakpoint and wider.
  @mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
      @media (min-width: $min) {
        @content;
      }
    } @else {
      @content;
    }
  }
  
  // Media of at most the maximum breakpoint width. No query for the largest breakpoint.
  // Makes the @content apply to the given breakpoint and narrower.
  @mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
      @media (max-width: $max) {
        @content;
      }
    } @else {
      @content;
    }
  }
  
  // Media that spans multiple breakpoint widths.
  // Makes the @content apply between the min and max breakpoints
  @mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($lower, $breakpoints);
    $max: breakpoint-max($upper, $breakpoints);
  
    @if $min != null and $max != null {
      @media (min-width: $min) and (max-width: $max) {
        @content;
      }
    } @else if $max == null {
      @include media-breakpoint-up($lower, $breakpoints) {
        @content;
      }
    } @else if $min == null {
      @include media-breakpoint-down($upper, $breakpoints) {
        @content;
      }
    }
  }
  
  // Media between the breakpoint's minimum and maximum widths.
  // No minimum for the smallest breakpoint, and no maximum for the largest one.
  // Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
  @mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    $max: breakpoint-max($name, $breakpoints);
  
    @if $min != null and $max != null {
      @media (min-width: $min) and (max-width: $max) {
        @content;
      }
    } @else if $max == null {
      @include media-breakpoint-up($name, $breakpoints) {
        @content;
      }
    } @else if $min == null {
      @include media-breakpoint-down($name, $breakpoints) {
        @content;
      }
    }
  }
  

  /**
 *   MEDIA QUERIES FOR MOBILE-FIRST DESIGN
 * -------------------------------------------------------------------
 * This following font-face mixin, you can make that tedious task much faster. 
 * Make sure that you use the right file path within the url() function.
 *
 * .element {@include breakpoint(large)}
 */

//   @mixin breakpoint($point) {
//     @if $point == large {
//        @media only screen and (min-width: 1366px) {
//           @content;
//        }
//     } 
//     @else if $point == desktop {
//        @media only screen and (min-width: 1024px) {
//           @content;
//        }
//     } 
//     @else if $point == tablet {
//        @media only screen and (min-width: 600px) {
//           @content;
//        }
//     }
//  }


// $tablet: 768;
// $large: 1024;
// $desktop: 1280;

// @mixin tablet {
//   @media only screen and (min-width: $tablet * 1px) {
//     @content;
//   }
// }

// @mixin large {
//   @media only screen and (min-width: $large * 1px) {
//     @content;
//   }
// }

// @mixin desktop {
//   @media only screen and (min-width: $desktop * 1px) {
//     @content;
//   }
// }




//////////

// @mixin bp-large {
//   @media only screen and (max-width: 60em) {
//       @content;
//   }
// }
// @mixin bp-medium {
//   @media only screen and (max-width: 40em) {
//       @content;
//   }
// }
// @mixin bp-small {
//   @media only screen and (max-width: 30em) {
//       @content;
//   }
// }


///////
// @mixin media($typeMedia, $width: ''){
//   @if ($typeMedia == 'min' or $typeMedia == 'max') {
//     @media screen and ('#{$typeMedia}-width': $width){
//       @content;
//     }
//   }

//   @if ($typeMedia == 'print') {
//     @media print {
//       @content;
//     }
//   }
// }


/////////////

@mixin mq($screen) {
  @media (max-width: $screen+"px") {
    @content; // the content you add will be placed here
  }
}


// $mobile: 480px;
// $tabletPortrait: 767px;
// $tabletLandscape: 1024px;
// $desktop: 1200px;
// @mixin breakpoint($media) {
//   @if $media == mobile {
//     @media (max-width: $mobile) { @content; }
//   }
//   @else if $media == tablet {
//     @media (min-width: $tabletPortrait) and (max-width: $tabletLandscape) { @content; }
//   }
//   @else if $media == smallScreen {
//     @media (max-width: $desktop) { @content; }
//   }
//   @else if $media == desktop {
//     @media (min-width: $desktop) { @content; }
//   }
// }

// $breakpoints: (
//     "phone":        400px,
//     "phone-wide":   480px,
//     "phablet":      560px,
//     "tablet-small": 640px,
//     "tablet":       768px,
//     "tablet-wide":  1024px,
//     "desktop":      1248px,
//     "desktop-wide": 1440px
// );

// @mixin screen($width, $type: min) {
//     @if map_has_key($breakpoints, $width) {
//         $width: map_get($breakpoints, $width);
//         @if $type == max {
//             $width: $width - 1px;
//         }
//         @media only screen and (#{$type}-width: $width) {
//             @content;
//         }
//     }
// }



@mixin breakpoint($point) {
  @if $point == desktop {
    @media (min-width: 70em) { @content ; }
 }
  @else if $point == laptop {
    @media (min-width: 64em) { @content ; }
 }
   @else if $point == tablet {
    @media (min-width: 50em) { @content ; }
 }
  @else if $point == phablet {
    @media (min-width: 37.5em)  { @content ; }
 }
 @else if $point == mobileonly {
    @media (max-width: 37.5em)  { @content ; }

 }
}


/* BREAKPOINTS */
$breakpoints: (
  "break-mobile": 290px,
  "break-phablet": 480px,
  "break-tablet": 768px,
  "break-desktop": 1020px,
  "break-wide": 1280px
);

				// This can be stored globally and can be pulled in by the mixin
				$breakpoints: (
				  'tiny':   ( max-width:  767px ),
				  'small':  ( min-width:  768px ),
				  'medium': ( min-width:  992px ),
				  'large':  ( min-width: 1200px ),
				  'custom': ( min-height:  40em )
				);

				// Creating the mixin
				@mixin breakpoint($name) {
						@if map-has-key($breakpoints, $name) {
								@media #{inspect(map-get($breakpoints, $name))} {
							@content;
						}
					}
					@else {
						@warn "Couldn't find a your breakpoint named `#{$name}`.";
					}
				}
			