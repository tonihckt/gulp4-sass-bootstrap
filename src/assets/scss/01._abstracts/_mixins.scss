/*!
 *
 * ======================================================================
 * 00. MIXINS
 * ======================================================================
 *
 * They are declared using @mixin and you can name them pretty much whatever you * want (with some sensible exceptions, and obviously it will be easier to read 
 * your code if you name it something relevant!):
 * 
 */

 
// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.

@include _assert-ascending($grid-breakpoints, "$grid-breakpoints");
@include _assert-starts-at-zero($grid-breakpoints, "$grid-breakpoints");


/**
 * BACKGROUND IMAGE
 * -------------------------------------------------------------------
 */
 
 @mixin background(
  $imgpath,
  $position: center,
  $size: null,
  $repeat: no-repeat
) {
  background: {
    image: url($imagesUrl+$imgpath);
    position: $position;
    size: $size;
    repeat: $repeat;
  }
}

/**
 * CLEARFIX
 * -------------------------------------------------------------------
 */
 @mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

/**
 * PLACEHOLDER
 * -------------------------------------------------------------------
 */

@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

@mixin placeholder {
  @include optional-at-root("::-webkit-input-placeholder") {
    @content;
  }

  @include optional-at-root(":-moz-placeholder") {
    @content;
  }

  @include optional-at-root("::-moz-placeholder") {
    @content;
  }

  @include optional-at-root(":-ms-input-placeholder") {
    @content;
  }
}

/**
 * POSITION
 * -------------------------------------------------------------------
 * Define vertical, horizontal, or both position
 */

@mixin center($position) {
  position: absolute;

  @if $position == "vertical" {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  } @else if $position == "horizontal" {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  } @else if $position == "both" {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

/**
 * COLOR PALETTE
 * -------------------------------------------------------------------
 * .element {background : color ($indigo , 400 );}
 */

 @function color($color, $value: 500) {
  @return map-get($color, $value);
}

/**
 * FONT-SIZE REM TO PIXEL
 * -------------------------------------------------------------------
 * .element{font-size: rem-calc(16px);}
 */

$rem-base: 16px !default;

// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// CONVERT TO REM
@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}

/**
 * LETTER-SPACING FROM ADOBE XD TO EM
 * -------------------------------------------------------------------
 */

 @mixin letter-spacing($spacing) {
  letter-spacing: ($spacing / 1000) * 1em;
}

/**
 * FONTS
 * -------------------------------------------------------------------
 */

// ==> Font Family
@mixin ff-primary {
  font-family: $ff-primary;
}

@mixin ff-secondary {
  font-family: $ff-secondary;
}

// ==> Font Size
@mixin fs-verysmall {
  font-size: $fs-verysmall;
  line-height: 1em;
}

@mixin fs-small {
  font-size: $fs-small;
  line-height: 1.2em;
}

@mixin fs-medium {
  font-size: $fs-medium;
  line-height: 1.2em;
}

@mixin fs-big {
  font-size: $fs-big;
  line-height: 1.2em;
}

@mixin fs-verybig {
  font-size: $fs-verybig;
  line-height: 1.1em;
}

@mixin font(
  $ff: false,
  $fs: false,
  $fw: false,
  $fst: false,
  $lh: false,
  $co: false,
  $ls: false
) {
  @if $ff {
    font-family: $ff;
  }
  @if $fs {
    // font-size: $fs;
    font-size: rem-calc($fs);
  }
  @if $fw {
    font-weight: $fw;
  }
  @if $fst {
    font-style: $fst;
  }
  @if $lh {
    line-height: $lh;
  }
  @if $co {
    color: $co;
  }
  @if $ls {
    @include letter-spacing($ls);
  }
}

@mixin font-source-sans(
  $size: false,
  $color: false,
  $weight: false,
  $lh: false
) {
  font-family: $ff-primary;
  @if $size {
    font-size: $size;
  }
  @if $color {
    color: $colour;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $lh {
    line-height: $lh;
  }
}

/**
 * BOX SHADOW
 * -------------------------------------------------------------------
 */


/**
 * CARD SHADOW
 * -------------------------------------------------------------------
 * .element{ @include card-shadow(1); }
 */

 @mixin card-shadow($level:1){

  @if $level == 1 {
    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
  }
  @else if $level == 2 {
    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
  }
  @else if $level == 3 {
    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
  }
  @else if $level == 4 {
    box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
  }
  @else if $level == 5 {
    box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
  }
}


 /**
 * LINEAR - GRADIENT
 * -------------------------------------------------------------------
 * @include linear-gradient(#00FFFF,#0080FF,45deg);
 */

 @mixin linear-gradient($color-one,$color-two,$degrees) {
  background: -moz-linear-gradient($degrees, $color-one 0%, $color-two 100%); /* ff3.6+ */
  background: -webkit-gradient(linear, left top, right top, color-stop(0%, $color-one), color-stop(100%, $color-two)); /* safari4+,chrome */
  background: -webkit-linear-gradient($degrees, $color-one 0%, $color-two 100%); /* safari5.1+,chrome10+ */
  background: -o-linear-gradient($degrees, $color-one 0%, $color-two 100%); /* opera 11.10+ */
  background: -ms-linear-gradient($degrees, $color-one 0%, $color-two 100%); /* ie10+ */
  background: linear-gradient($degrees, $color-one 0%, $color-two 100%); /* w3c */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$color-one', endColorstr='$color-two',GradientType=1 ); /* ie6-9 */
}


/**
 * RETINA-READY IMAGES
 * -------------------------------------------------------------------
 * Supporting retina-ready images you can serve to Apple devices with a Retina Display. 
 * 
 * element.image{background: url("my-image.png") no-repeat; @include retina-image("my-image2x.png", 1000px, 500px);}
 */

@mixin retina-image($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
      background-image: url($image);
      background-size: $width $height;
  }
}


/**
 * FIXED ASPECT RATIO
 * -------------------------------------------------------------------
 * A consistent look across different screen sizes you will find this aspect ratio mixin useful. 
 * It maintains the aspect ratio at any screen size. To use this mixin, you need two HTML elements: 
 * an outer and an inner one. The mixin calculates the aspect ratio of the two elements and maintains
 * that at any resolution.
 * 
 *
 * HTML: <div class="outer-box"><div class="inner-box"></div></div>
 * CSS: element.outer-box{@include aspect-ratio(4, 3);}
 */

 @mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
     display: block;
     content: "";
     width: 100%;
     padding-top: ($height / $width) * 100%;
  }
  > .inner-box {
     position: absolute;
     top: 0;
     left: 0;
     right: 0;
     bottom: 0;
  }
}



/**
 * TRANSITION
 * -------------------------------------------------------------------
 */
@mixin transition(
  $transition-property: all,
  $transition-time: 0.15s,
  $method: ease-in-out
) {
  -webkit-transition: $transition-property $transition-time $method;
  -moz-transition: $transition-property $transition-time $method;
  -ms-transition: $transition-property $transition-time $method;
  -o-transition: $transition-property $transition-time $method;
  transition: $transition-property $transition-time $method;
}

.container {
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
}

.row {
  margin-right: -$gutter / 2;
  margin-left: -$gutter / 2;
}

.col-xs-1,
.col-sm-1,
.col-md-1,
.col-lg-1,
.col-xs-2,
.col-sm-2,
.col-md-2,
.col-lg-2,
.col-xs-3,
.col-sm-3,
.col-md-3,
.col-lg-3,
.col-xs-4,
.col-sm-4,
.col-md-4,
.col-lg-4,
.col-xs-5,
.col-sm-5,
.col-md-5,
.col-lg-5,
.col-xs-6,
.col-sm-6,
.col-md-6,
.col-lg-6,
.col-xs-7,
.col-sm-7,
.col-md-7,
.col-lg-7,
.col-xs-8,
.col-sm-8,
.col-md-8,
.col-lg-8,
.col-xs-9,
.col-sm-9,
.col-md-9,
.col-lg-9,
.col-xs-10,
.col-sm-10,
.col-md-10,
.col-lg-10,
.col-xs-11,
.col-sm-11,
.col-md-11,
.col-lg-11,
.col-xs-12,
.col-sm-12,
.col-md-12,
.col-lg-12 {
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
}

/**
 * STICKY FOOTER
 * -------------------------------------------------------------------
 */
@mixin sticky-footer {
  html,
  body,
  main,
  .page,
  .cscontent {
    height: 100%;
  }

  .cscontent {
    display: flex;
    flex-direction: column;

    & > * {
      flex: 1 0 auto;
    }
  }

  .row-top {
    flex: 0;
    flex-shrink: 0;
  }

  .row-bottom {
    flex: 0;
    flex-shrink: 0;
  }
}


/**
 * FLEXBOX OWN CONFIGURATION
 * -------------------------------------------------------------------
 * .element{@include flex-config($flex-direction: row, $align-items: center, $justify-content: center);}
 */

@mixin flex-config($justify-content: false, $flex: false, $flex-direction: false, $align-items: false) {
  display: flex;
  
  @if $justify-content != false {
    justify-content: $justify-content;
  }
  
  @if $flex != false {
    flex: $flex;
  }
  
  @if $flex-direction != false {
    flex-direction: $flex-direction;
  }
  
  @if $align-items != false {
    align-items: $align-items;
  }
}