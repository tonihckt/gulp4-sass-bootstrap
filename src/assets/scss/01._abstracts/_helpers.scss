/*!
 *
 * ======================================================================
 * 00.HELPERS
 * ======================================================================
 * 
 */

/**
 * CONVERT REM
 * -------------------------------------------------------------------
 */
// Variable Font size rem & px
// @mixin fz($size: 24, $base: 16){
//     // font-size: $size + px
//     font-size: ($size / ($base * 0.625)) + rem
// }


// @function countRem($value) {
//   $remValue: $value / 16px;
//   @return $remValue * 1rem;
// }
// @mixin font-size($value) {
//   font-size: $value;
//   font-size: calculateRem($value);
// }

///////////// 
// @include font-size(16px), this will compile into font-size: 1rem;

// @function calculate-rem($size) {
//   $rem-size: $size / 16px;
//   @return #{$rem-size}rem;
// }
// @mixin rem-calc($size) {
//   font-size: calculate-rem($size);
// }


// Functions
// @function px-to-em($pixels) {
//   @return #{$pixels/$base-font-size}em;
// }
/**
 * CONTAINER
 * -------------------------------------------------------------------
 */
 @mixin container($ancho, $alto, $color) {
  width: $ancho;
  height: $alto;
  background-color: $color;
  border-radius: 5%;
  text-align: center;
  margin: 5px;
}

/**
* RESET
* -------------------------------------------------------------------
*
*/

@mixin reset {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}


/**
* FLEX
* -------------------------------------------------------------------
* .centered-elements{@include flex-center(); border: 1px solid gray}
*/
@mixin flex-center {
  display: -webkit-flex;
  display: flex;
  justify-content: center;
  align-items: center;
}

/**
* ROTATE
* -------------------------------------------------------------------
* .rotate-elements{@include rotate(45eg);}
*/
@mixin rotate($degree) {
  -webit-transform:rotate($degree); // Webkit-based
  -moz-transform:rotate($degree); // Firefox
  -ms-transform:rotate($degree); // Internet Explore
  -o-transform:rotate($degree); // Opera
  transform:rotate($degree); // Standar Css
}



/**
* ZEBRA
* -------------------------------------------------------------------
* {@include zebra();}
*/
@mixin zebra() {
  @for $i from 1 through 7 {
    @if ($i % 2 == 1){
      .stripe-#{$i}{
        background-color: black;
        color: white;
      }
    }
  }
}

/**
* PADDING > MARGIN
* -------------------------------------------------------------------
* @mixin that will choose padding sizing if it’s greater than the margin
* .container{@include spacing(10px, 20px}
*/

@mixin spacing($padding, $margin) {
  @if($padding > $margin){
    padding: $padding;
  } @else {
    padding: $margin;
  }
}

/**
* BUTTON -> CHANGES COLOR
* -------------------------------------------------------------------
* @mixin Changes its background color based on its width.
* .button{@include buttom-color(20px, 30px}
*/

@mixin buttom-color($height, $width) {
  @if(($height > $width) and ($width >= 35px)){
    background-color: blue;
  } @else {
    background-color: red;
  }
}


/**
* VISIBILITY
* -------------------------------------------------------------------
* Quick mixin to hide or show an element, useful for fade in/out animations
*
*/

@mixin fade($type) {
  @if $type== "hide" {
    visibility: hidden;
    opacity: 0;
    transition: visibility 1s, opacity 1s;
  } @else if $type== "show" {
    visibility: visible;
    opacity: 1;
    transition: visibility 1s, opacity 1s;
  }
}


/**
* BOX-SHADOW
* -------------------------------------------------------------------
* div{@include box-shadow(0, 5px, 5px, rgba(0, 0, 0, 0.7));}
*/
@mixin box-shadow($x, $y, $blur, $spread) {
  -webkit-box-shadow: $x $y $blur $spread;
  -moz-box-shadow: $x $y $blur $spread;
  -ms-box-shadow: $x $y $blur $spread;
  box-shadow: $x $y $blur $spread;
}

/**
* COLORS OF STATES
* -------------------------------------------------------------------
* .heading {@include color-state(error);}
*/
@mixin color-state($val) {
  @if $val == error {
    color: $clr-error;
  }
  @else if $val == warning {
    color: $clr-warning;
  }
  @else if $val == success {
    color: $clr-success;
  }
  @else {
    color: $clr-default
  }
}


 /**
 * VERTICALLY ALIGNING ELEMENTS
 * -------------------------------------------------------------------
 * mixin usage: @include center-elements(both); | @include center-elements(vert);
 */

 @mixin center-elements($center-all) {
  position: absolute;
  @if $center-all == both {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
  @else {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }
}


/**
* BORDER
* -------------------------------------------------------------------
* Add a border to one side or three sides
*
* .border-all { @include border(5px,solid,#0080FF,all); }
* .border-less-bottom { @include border(5px,solid,#0080FF,all,bottom); }
* .border-top { @include border(5px,dashed,#0080FF,top); }
*/

@mixin border(
    $border-size: 1px,
    $border-pattern: solid,
    $border-color: black,
    $border-position: all,
    $border-clear: none ) {
  @if $border-position == all {
    border: $border-size $border-pattern $border-color;
  }
  @else {
    border-#{$border-position}: $border-size
    $border-pattern $border-color;
  }
  @if $border-clear == none {
    $border-position: all;
  }
  @else {
    border-#{$border-clear}: none;
  }
}

/**
* BORDER RADIUS
* -------------------------------------------------------------------
* .element { @include border-radius(1em); }
* .element { @include border-radius(25px,5px,25px,5px); }
*/

@mixin border-radius($top-left:10px, $top-right:null, $bottom-right:null, $bottom-left:null){
  -webkit-border-radius: $top-left $top-right $bottom-right $bottom-left;
     -moz-border-radius: $top-left $top-right $bottom-right $bottom-left;
      -ms-border-radius: $top-left $top-right $bottom-right $bottom-left;
          border-radius: $top-left $top-right $bottom-right $bottom-left;  
}

/**
* TRANSITION ALL
* -------------------------------------------------------------------
* Animate properties like color, width and padding to create fade and scale effects.
*
* .element.fade { @include transition(all,0.5s,ease-out); }
* .element.scale { @include transition(all,0.3s,ease-out); }
*/

@mixin all-transition($what: all, $time: 0.2s, $how: ease-in-out) {
  -webkit-transition: $what $time $how;
  -moz-transition:    $what $time $how;
  -ms-transition:     $what $time $how;
  -o-transition:      $what $time $how;
  transition:         $what $time $how;
}


/**
* SKEW BACKGROUND TRANSITION
* -------------------------------------------------------------------
*
* .element.button { &:nth-of-type(1) 
* { @include background-transition(#4CAF50, #3F51B5);}}
*/

@mixin skew-background-transition($initial, $hover, $inverted: false) {
  background: linear-gradient(
    90deg,
    $hover 0%,
    $hover 50%,
    $initial 50%,
    $initial 100%
  );
  background-repeat: no-repeat;
  background-size: 200% 100%;

  background-position: right bottom;
  @if $inverted {
    background-position: left bottom;
  }
  transition: background-position 0.25s ease-out;

  &:hover {
    background-position: left bottom;
    @if $inverted {
      background-position: right bottom;
    }
  }
}

/**
* OPACITY
* -------------------------------------------------------------------
* 
* .element.sevenfive { @include opacity(0.75); }
*/

@mixin opacity($opacity: 0.5) {
  $opacityPercentage: ($opacity * 100);
  filter: alpha(opacity=$opacityPercentage); //IE8
  opacity: $opacity;
}

/**
* TEXT SHORTENING
* -------------------------------------------------------------------
* Adds an ellipsis (…) to the end
*
* .element{@include text-shorten();}
*/

@mixin text-shorten {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/**
* TEXT SHADOW
* -------------------------------------------------------------------
* Add a basic shadow behind your text, or to create a unique effect 
*
* .element{ @include text-shadow(2px,2px,2px,rgba(0,0,0,.25)); }
* .element{ @include text-shadow(-1px,-2px,3px,#00FFFF, 1px,2px,3px,#0080FF); }
*/

@mixin text-shadow($x1:2px, $y1:2px, $blur1:5px, $color1:black, $x2:null, $y2:null, $blur2:null, $color2:null){
  @if ($x2) {
   text-shadow: $x1 $y1 $blur1 $color1, $x2 $y2 $blur2 $color2; 
  }
  @else {
    text-shadow: $x1 $y1 $blur1 $color1;
  }
}


/**
* TRANSFORM ROTATE
* -------------------------------------------------------------------
* Add a basic shadow behind your text, or to create a unique effect 
*
* .element{   @include rotate(180, 0.00000000, 1.00000000, -1.00000000, 0.00000000); }
*/

@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
  -webkit-transform: rotate($deg + deg);
  -moz-transform: rotate($deg + deg);
  -ms-transform: rotate($deg + deg);
  -o-transform: rotate($deg + deg);
  transform: rotate($deg + deg);
  filter: progid:DXImageTransform.Microsoft.Matrix(
       M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand');
    zoom: 1;
}

/**
* ARROW WITH FOUR OPTIONAL DIRECTIONS
* -------------------------------------------------------------------
* This mixin helps you quickly create an arrow with from four directions
*
* .element{@include arrow();}
* .element{@include arrow(up, 10px, #efefef);}
*/

@mixin arrow($direction: down, $size: 5px, $color: #555) {
  width: 0;
  height: 0;
  @if ($direction == left) {
     border-top: $size solid transparent;
     border-bottom: $size solid transparent; 
     border-right: $size solid $color;
  }
  @else if ($direction == right) {
     border-top: $size solid transparent;
     border-bottom: $size solid transparent; 
     border-left: $size solid $color;
  }
  @else if ($direction == down) {
     border-left: $size solid transparent;
     border-right: $size solid transparent;
     border-top: $size solid $color;
  }
  @else {
     border-left: $size solid transparent;
     border-right: $size solid transparent;
     border-bottom: $size solid $color;
  }
}

/**
* BACKGROUND IMAGE --- (por ver)
* -------------------------------------------------------------------
*
* .element.icon { @include background-image("header.png", right, $black); }
*/

$imgpath--rel : '../../images/';

@mixin background-image($img, $background-position, $background-color) {
  background-image: url('#{$imgpath--rel}/#{$img}');
  background-repeat: no-repeat;
  background-position: $background-position;
  background-color: $background-color ;
} 


/**
* SQUARE
* -------------------------------------------------------------------
*
* .element.square { @include square(100px, $radius: 4px); }
*/

@mixin square($size, $radius: 0) {
  width: $size;
  height: $size;

  @if $radius != 0 {
    border-radius: $radius;
  }
}

/*REPLACE TEXT
* -------------------------------------------------------------------
*
* .element.icon { @include replace-text(url("../../images/mail.svg"), 0); }
*/

@mixin replace-text($image, $x: 50%, $y: 50%) {
  text-indent: -99999em;
  overflow: hidden;
  text-align: left;

  background: {
    image: $image;
    repeat: no-repeat;
    position: $x $y;
  }
}

/**
* TINYMCE IMAGE
* -------------------------------------------------------------------
* Managing image position
* Margins and text runaround when working with WYSWIYG HTML editors, like TinyMCE
*
* .element{ @include tinymce-img(); }
*/

@mixin tinymce-img {
  img {
    margin: 0.5em 2em 1em 0;
  }
  img[style*="float: left"], img.left {
    float: left;
    margin: 0.5em 2em 1em 0;
    max-width: 50%;
  }
  img[style*="float: right"], img.right {
    margin: 0.5em 0 1em 2em;
    float: right;
  }
  .captionImage.right {
    float: right; clear: right;
    margin: 0 0 1em 2em;
  }
  .captionImage.left {
    float: left; clear: left;
    margin: 0 2em 1em 0;
  }
  .captionImage img.left {
    max-width: 100% !important;
    width: 100% !important;
    margin-right: 0;
  }
  .captionImage img.right {
    max-width: 100% !important;
    width: 100% !important;
    margin-left: 0;
  }

@media print, screen and (min-width: 640px) {
  img[style*="float: left"], img.left, .captionImage.left {
    max-width: 50%;
  }
  img[style*="float: right"], img.right, .captionImage.right {
    max-width: 50%;
  }
}
@media print, screen and (min-width: 1280px) {
  img[style*="float: left"], img.left, .captionImage.left {
    max-width: 75%;
  }
  img[style*="float: right"], img.right, .captionImage.right {
    max-width: 75%;
  }
}
}

/**
* CENTER CONTENT
* -------------------------------------------------------------------
* .element { @include center-content; }
*/

@mixin flex-center {
  display: flex; 
  justify-content: center; 
  align-items: center; 
 }

/**
* INPUT PLACEHOLDER
* -------------------------------------------------------------------
* .placeholder { @include placeholder { color: #0066CC; background: #ccffff; } }
*/

@mixin placeholder() {
  input::-webkit-input-placeholder {@content;}
  input:-moz-placeholder           {@content;}
  input::-moz-placeholder          {@content;}
  input:-ms-input-placeholder      {@content;}
}

/**
* ADD VENDOR PREFIXES TO ANY CSS PROPERTY
* -------------------------------------------------------------------
* Add vendor prefixes to CSS properties that don’t come with sufficient browser support. 
*
* .placeholder { @include css3-prefix(transform, scale3d(2.5, 2, 1.5)); }
*/

@mixin css3-prefix($prop, $value) {
  -webkit-#{$prop}: #{$value};
  -moz-#{$prop}: #{$value};
  -ms-#{$prop}: #{$value};
  -o-#{$prop}: #{$value};
  #{$prop}: #{$value};
}


/**
* VERTICAL CENTERING
* -------------------------------------------------------------------
* The following mixin contains all the CSS declarations you need to vertically position any HTML element  
*
* .placeholder { @include vertical-center(); }
*/

@mixin vertical-center {
  position: relative;
  top: 50%;
  -ms-transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%);
}

/**
* POSITION CENTER
* -------------------------------------------------------------------
* Block horizontal and vertical centering helper (Important:
* you must have a parent element with position: relative). 
*
*/

@mixin position-center {
  position:absolute;
  top:50%;
  left:50%;
  -webkit-transform: translate(-50%, -50%);
  -ms-transform: translate(-50%, -50%);
  transform: translate(-50%, -50%);
}

/**
* ABSOLUTE POSITIONING
* -------------------------------------------------------------------
*  It allows you to quickly specify values for the four directions: top, right, bottom, and left.
*
* .element { @include abs-position(100px, 100px, auto, auto); }
*/

@mixin abs-position ($top, $right, $bottom, $left) {
  position: absolute; 
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

/**
* BELEVED CORNER MIXIN 
* -------------------------------------------------------------------
* Bevels corners of an element, in same fashion as border radius.
* Compatable down to IE 9. Works like any other block level element (almost)
*
* .module { @include border-bevel($background-color, $bevel-radius
* $corner-top-left-bevel (boolean), $corner-top-right-bevel (boolean),
* $corner-bottom-right-bevel (boolean), $corner-bottom-left-bevel (boolean);}
*
* Usage
* .element{@include corner-bevel-veryold("MediumAquaMarine", 20px);}
* .element{@include corner-bevel-veryold( "Pink", 20px);}
* .element{@include corner-bevel-veryold("LightBlue", 20px);}
* .element{@include corner-bevel-veryold("LightCoral", 20px, true, false, true, false);}
* .element{@include corner-bevel-veryold("LightSalmon", 20px);}
* .element{@include corner-bevel-veryold();}
*
*/


// Top belevels, trapezoid shapes
@mixin corner-top-left-bevel($corner-bevel, $background-color) {
  border-bottom-color: #{$background-color};
  border-width: 0 0 #{$corner-bevel} #{$corner-bevel};
}
@mixin corner-top-right-bevel($corner-bevel, $background-color) {
  border-bottom-color: #{$background-color};
  border-width: 0 #{$corner-bevel} #{$corner-bevel} 0;
}
@mixin corner-top-both-bevel($corner-bevel, $background-color) {
  border-bottom-color: #{$background-color};
  border-width: 0 #{$corner-bevel} #{$corner-bevel} #{$corner-bevel};
}

// Bottom belevels, trapezoid shapes
@mixin corner-bottom-right-bevel($corner-bevel, $background-color) {
  border-top-color: #{$background-color};
  border-width: #{$corner-bevel} #{$corner-bevel} 0 0;
}
@mixin corner-bottom-left-bevel($corner-bevel, $background-color) {
  border-top-color: #{$background-color};
  border-width: #{$corner-bevel} 0 0 #{$corner-bevel};
}
@mixin corner-bottom-both-bevel($corner-bevel, $background-color) {
  border-top-color: #{$background-color};
  border-width: #{$corner-bevel} #{$corner-bevel} 0 #{$corner-bevel};
}

// Square, when there is no bevel
@mixin corner-both-bevel-none($corner-bevel, $background-color) {
  background-color: #{$background-color};
  height: #{$corner-bevel};
}


// works in IE10
// @include corner-bevel-new();
// @include corner-bevel-new(#888, 0px, 20px, 40px, 60px);
// @mixin corner-bevel-new (
//     $background-color: #aaa,          // Background color, default `#aaa`
//     $corner-top-left-bevel: 10px,     // Top left corner bevel amount
//     $corner-top-right-bevel: 10px,    // Top right bevel amount bevel amount
//     $corner-bottom-right-bevel: 10px, // Bottom right corner bevel amount
//     $corner-bottom-left-bevel: 10px   // Bottom left corner bevel amount
// )

// works in IE9
//@include corner-bevel();
// @mixin corner-bevel-old (
//     $background-color: unquote("#aaa"), // Background color, default `#aaa`
//     $corner-bevel: 20px,                // Bevel amount, default 20px
//     $corner-top-left-bevel: true,       // Boolean, false = sharp corner
//     $corner-top-right-bevel: true,      // Boolean, false = sharp corner
//     $corner-bottom-right-bevel: true,   // Boolean, false = sharp corner
//     $corner-bottom-left-bevel: true     // Boolean, false = sharp corner
// )

// works in IE8
// @include border-bevel("LightCoral", 20, true, false, false, false);
@mixin corner-bevel-veryold (
  $background-color: unquote("#aaa"), // Background color, default `#aaa`
  $corner-bevel: 20px,                // Bevel amount, default 20px
  $corner-top-left-bevel: true,       // Boolean, false = sharp corner
  $corner-top-right-bevel: true,      // Boolean, false = sharp corner
  $corner-bottom-right-bevel: true,   // Boolean, false = sharp corner
  $corner-bottom-left-bevel: true     // Boolean, false = sharp corner
  ) 
  {
  background: #{$background-color};
  position: relative;
  height: 100%;
  &:before,
  &:after {
      border-color: transparent;
      box-sizing: border-box;
      border-style: solid;
      content: "";
      display: block;
      left: 0;
      position: absolute;
      width: 100%;
  }
  &:before {
      @if $corner-top-left-bevel == false and $corner-top-right-bevel == false {
          @include corner-both-bevel-none($corner-bevel, $background-color);
      } @else if $corner-top-left-bevel == true and $corner-top-right-bevel == true {
          @include corner-top-both-bevel($corner-bevel, $background-color);
      } @else if $corner-top-left-bevel == false {
          @include corner-top-right-bevel($corner-bevel, $background-color);
      } @else if $corner-top-left-bevel == true {
          @include corner-top-left-bevel($corner-bevel, $background-color);
      }
      top: -#{$corner-bevel};
  }
  &:after {
      @if $corner-bottom-left-bevel == false and $corner-bottom-right-bevel == false {
          @include corner-both-bevel-none($corner-bevel, $background-color);
      } @else if $corner-bottom-left-bevel == true and $corner-bottom-right-bevel == true {
          @include corner-bottom-both-bevel($corner-bevel, $background-color);
      } @else if $corner-bottom-left-bevel == false {
          @include corner-bottom-right-bevel($corner-bevel, $background-color);
      } @else if $corner-bottom-left-bevel == true {
          @include corner-bottom-left-bevel($corner-bevel, $background-color);
      }
      bottom: -#{$corner-bevel};
  }
  @content;
}




/**
* MIXIN BUTTON
* ------------------------------------------------------------------- 
*
* .element { @include button(2px 4px,blue, 10px, red,MediumAquaMarine); }
*/

  @mixin button($padding:null, $bg-color:null,$border-radius:null,$border-color:null, $font-size:null,$font-color:null) {

  display: inline-block;
  vertical-align: middle;
  padding: $padding;
  background: $bg-color;
  border: 1px solid $border-color;
  border-radius: $border-radius;
  color: $font-color;
  font-size:$font-size;
  text-align: center;

  // &:hover,
  // &:focus,
  // &.focus,
  // &:active,
  // &.active,

  &:hover {
	  background:darken($bg-color,8%);
	  transition: all 0.3s ease;
	}
	&:active {
    background:darken($bg-color,25%);
    transition: all 0.3s ease;
  }
  
}

/**
* TEXT-OVER-IMG
* ------------------------------------------------------------------- 
*
*/

@mixin text-over-img ($background-img){ 
  position: absolute;
  z-index: -2;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: url($background-img) no-repeat center center fixed;
  opacity: 0.65;
  width: 100%;
  height: auto;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
}


/**
* GRADIENT BORDER
* ------------------------------------------------------------------- 
*
* .element.article-promo { @include gradient-border; // Gives all defaults}
* .big-border { @include gradient-border(50px);} // If declared in order you don't have to label your arguments
* .red-gradient {@include gradient-border($gradient-start-color: red,$gradient-end-color: darkred);}
* .vertical-gradient { @include gradient-border($gradient-direction: to bottom);}
*/

@mixin gradient-border() {
  position: relative;
  padding: $border-size * 2;
  > * {
      z-index: 100;
      position: relative;
  }
  &::before {
      @extend %pseudo-properties;
      background-color: $original-background-color;
      top: $gradient-size;
      left: $gradient-size;
      width: calc(100% - #{$gradient-border-size * 2});
      height: calc(100% - #{$gradient-border-size * 2});
  }
  &::after {
      @extend %pseudo-properties;
      background-image: linear-gradient($gradient-direction, $gradient-start-color, $gradient-end-color);
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      mix-blend-mode: screen;
  }
}

/**
* SPACING
* ------------------------------------------------------------------- 
* .element { @include spacing( 10px, 1px solid black )}
*/

@mixin spacing ($margin, $padding, $border) {
  margin: $margin;
  border: $border;
  padding: $padding;
}

// @mixin color ($background, $text, $border) {
//   background-color: $background;
//   color: $text;
//   border-color: $border
// }


/**
* TRANSITION-COLOR
* ------------------------------------------------------------------- 
* .element {@include transition;}
* .element {@include transition(color);}
*/

@mixin transition-color($what: all, $length: .3s, $easing: ease-in-out, $args: '') {
  @if( $args=='' ){
    -webkit-transition: $what $length $easing;
    transition: $what $length $easing;
  } @else {
    -webkit-transition: $args;
    transition: $args;
  }
}

/**
* Liner-Gradients
* ------------------------------------------------------------------- 
* .elemento {@include linear-gradient(#000,#fff);}
*/

@mixin linear-gradient($fromColor, $toColor) {
  background-color: $toColor;
  background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor));
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor);
  background-image: linear-gradient(top, $fromColor, $toColor);
}

/**
* PSEUDO-ELEMENT
* ------------------------------------------------------------------- 
* @include pseudo-element('before') { content: ''; }
*/

@mixin pseudo-element($element) {
  &:#{$element}, &::#{$element} {
    @content;
  }
}


@mixin pseudo($display: block, $pos: absolute, $content: ‘’){
  content: $content;
  display: $display;
  position: $pos;
}


@mixin responsive-aspect-ratio($x,$y, $pseudo: false) {
  $padding: unquote( ( $y / $x ) * 100 + ‘%’ );
  @if $pseudo {
      &:before {
          @include pseudo($pos: relative);
          width: 100%;
          padding-top: $padding;
      }
  } @else {
      padding-top: $padding;
  }
}


// @mixin ba($ba,$width,$height,$top,$left,$rel:true,$content:null) {
//   @if ($rel == true) {
//     position: relative;
//   }
//   &:#{$ba} {
//     position: absolute;
//     width:$width;
//     height:$height;
//     top:$top;
//     left:$left;
//     content: "#{$content}";
//     @content;
//   }
// }