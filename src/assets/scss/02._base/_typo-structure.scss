/*!
 *
 * ======================================================================
 * 00. TYPOGRAPRY STRUCTURE
 * ======================================================================
 * 
 */

//  $headings : h1 h2 h3 h4 h5 h6;
//  $font-size-base : 16px;
 
//  $font-size-upper : 36px;
//  $font-size-dec : 4px;

// // ==> convert the variables to unit-less values 
@function strip-units($value) {
  @return $value / ($value * 0 + 1);
}

// // ==> converted pixel values to rem values
@mixin fontsize-lineheight($font-size, $line-height, $base: 16px) {
  $remsize: (strip-units($font-size) / strip-units($base));
  font-size: #{$remsize}rem;
  line-height: strip-units($line-height / $font-size);
}

// // ==> heading sizes
@mixin heading($heading) {
  $sizes: map-get($heading-sizes, $heading);
  $line-heights: map-get($heading-lineheights, $heading);
  @include fontsize-lineheight(nth($sizes, 3), nth($line-heights, 3));
  @include media-breakpoint-up(md) {
      @include fontsize-lineheight(nth($sizes, 2), nth($line-heights, 2));
  }
  @include media-breakpoint-up(lg) {
      @include fontsize-lineheight(nth($sizes, 1), nth($line-heights, 1));
  }
}

// // ==> Setup the function in your functions or helpers files, wherever you keep these bits.
@function headings($from:1, $to:6) {
  @if $from == $to {
      @return 'h#{$from}';
  } @else {
      @return 'h#{$from},' + headings($from+1, $to);
  }
}


/**
 * MAPS HEADINGS SIZES
 * -------------------------------------------------------------------
 * map containing lists for the font sizes and line heights.
 */

 // // ==> font-sizes, from left to right:
 // // ==>    lg   md   sm

 $heading-sizes: (
    h1: 72px 48px 36px,
    h2: 48px 32px 30px,
    h3: 36px 30px 24px,
    h4: 30px 24px 20px,
    h5: 24px 20px 18px,
    h6: 20px 18px 16px
);
$heading-lineheights: (
    h1: 72px 48px 36px,
    h2: 48px 36px 30px,
    h3: 42px 36px 30px,
    h4: 36px 30px 24px,
    h5: 30px 24px 21px,
    h6: 24px 21px 18px
);

$headings: h1 h2 h3 h4 h5 h6;
@each $heading in $headings {
    #{$heading}, .#{$heading} {
        @include heading($heading);
    }
}

// // ==> TEXT
body {
  font-family: Lato, 'Helvetica Neue', sans-serif;
}
// // ==> HEADINGS

// Then call it with the rules/styles you want wherever you want (As long as the file/include has access to the above function of course).
#{headings(1,6)} {
  font-family: Lato, 'Helvetica Neue', sans-serif;
  color: black;
}

// // ==> BUTTONS
button, .button {
  font-family: Lato, 'Helvetica Neue', sans-serif;
}
// // ==> INPUTS
input, textarea, select {
  font-family: Lato, 'Helvetica Neue', sans-serif;
}



// @mixin heading-hs {
//   h1 {
//     font-size: 1.5em;
//     @media (min-width: 1200px){
//       font-size: 2.5em;
//     }
//     @media (min-width: 800px) {
//           font-size: 2em; 
//     }
//   }
//   h2 {
//     font-size: 1.2em;
//     @media (min-width: 1200px){
//       font-size: 2.3em;
//     }
//     @media (min-width: 800px) {
//       font-size: 1.8em;
//     }
//   }
//   h3 {
//     font-size: 1em;
//     @media (min-width: 1200px){
//       font-size: 2em;
//     }
//     @media (min-width: 800px) {
//       font-size: 1.5em;
//     }
//   }
// }



/**
 * HEADINGS MIXINS
 * -------------------------------------------------------------------
 * use:  div{ @include headings(){ color:red; } }
 * headings(4,6) or just headings(4)
 * .sweet{ @include headings(4){ color:blue; } }
 * .sweet{ @include headings(1,3){ color:red; } }
 */

// $base-font-size: 18px;
// $heading-scale: 4; // amount of px headings grow from h6 to h1

// @for $i from 1 through 6 {
//   h#{$i} {
//     font-size: $base-font-size + $heading-scale * (6 - $i);
//   }
// }


// @mixin headings($from: 1, $to: 6){
//   @for $i from $from through $to{
//     h#{$i}{
//       @content;
//     }
//   }
// }



// $step-size-heading: 0.33333;
// /* The mixin */
// @mixin heading-size($size) {
//     font-size: $size * $step-size-heading + em;
// }


// @mixin headings-all(){
//   h1{ @include heading-size(6);}
//   h2{ @include heading-size(5);}
//   h3{ @include heading-size(4);}
//   h4{ @include heading-size(3);}
//   h5{ @include heading-size(2);}
//   h6{ @include heading-size(1);}
// }



// @mixin headings-all(){
//   h1, h2, h3, h4, h5, h6,
//   .h1, .h2, .h3, .h4, .h5, .h6 {
//       @content;
//   }
//   // @include headings-sizes-ms();
// }


// @mixin headings-sizes-ms() {
// h1, .h1 {font-size: ms(4)}
// h2, .h2 {font-size: ms(3)}
// h3, .h3 {font-size: ms(2)}
// h4, .h4 {font-size: ms(1)}
// h5, .h5 {font-size: ms(0)}
// h6, .h6 {font-size: ms(-1)}
// }


// @include headings-all() {
// color: black;
// }

// @include headings(){
//   font-family: Lato, 'Helvetica Neue', sans-serif;
// }
